plugins {
    id 'idea'
    id 'maven-publish'
    alias(libs.plugins.archloom)
}

base {
    archivesName = "${mod_name}-neo-${libs.versions.minecraft.release.get()}"
}

loom {
    runs {
        client {
            client()
            setConfigName("Neo Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Neo Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        data {
            data()
            setConfigName("Neo Data")
            ideConfigGenerated(true)
            runDir("run")

            programArgs("'--mod', ${mod_id}, '--all', '--output', ${project(":Common").file('src/generated/resources/')}, '--existing', ${file('src/main/resources/')}")
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        name = 'Neo'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    minecraft libs.minecraft
    neoForge libs.neoforge
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.release.get()}@zip")
    }

    compileOnly(project(":Common"))
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

java {
    withSourcesJar()
    withJavadocJar()
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
